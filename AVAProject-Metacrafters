// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0; //solidity version

/*
Smart Contract Project - For this project, write a smart contract that implements the require(), assert() and revert() statements.
*/

contract errorHandling {
    string private tokenName = "DEIMAN";
    string private tokenAbbrv = "DMN";
    uint public totalSupply = 0;
    mapping(address => uint) public balances;

    function mintToken(address _address, uint _value) public {
        //checks if its a valid address
        require(_address != address(0), "Invalid address");
        //checks if the value is >= 100, so there's a minimum of 100 token
        require(_value >= 100, "Value must be greater than or equal to 100");

        totalSupply += _value;
        balances[_address] += _value;
        
        //assert to check if the balance is updated correctly
        assert(balances[_address] >= _value);
    }

    function burnToken(address _address, uint _value) public {
        //checks if the balance of the sender is less than 500, therefore burning token is not yet available.
	    if(balances[_address] < 500) {
            revert("Token burning in this account is not yet available.");
    	}
        
        //checks if its a valid address
        require(_address != address(0), "Invalid address");
        //checks if the value is >= 30, so there's a minimum of 30 token
        require(_value >= 30, "Value must be greater than or equal to 30");
        //checks if the balance of the sender has more than or enough amount
        require(balances[_address] >= _value, "Insufficient Balance");

        totalSupply -= _value; 
        balances[_address] -= _value;

        //assert to check if the balance is updated correctly
        assert(balances[_address] <= totalSupply); 
    }
}
